[
  {
    "type": "line-comment",
    "contents": "// TODO: Modify spawn logic:",
    "position": {
      "from": 0,
      "to": 29
    }
  },
  {
    "type": "line-comment",
    "contents": "//  1. First wave should be spawned at the point (maybe even in buildings?) - this should happend everytime point is changed",
    "position": {
      "from": 29,
      "to": 154
    }
  },
  {
    "type": "line-comment",
    "contents": "//  2. Rest of the waves should spawn behind the point - same distance as attackers",
    "position": {
      "from": 154,
      "to": 238
    }
  },
  {
    "type": "line-comment",
    "contents": "// TODO: Disable Neutrals globally?",
    "position": {
      "from": 239,
      "to": 275
    }
  },
  {
    "type": "line-comment",
    "contents": "// TODO: Points location:",
    "position": {
      "from": 276,
      "to": 302
    }
  },
  {
    "type": "line-comment",
    "contents": "//  - Start at edge of the town",
    "position": {
      "from": 302,
      "to": 334
    }
  },
  {
    "type": "line-comment",
    "contents": "//  - Continue through the town",
    "position": {
      "from": 334,
      "to": 366
    }
  },
  {
    "type": "line-comment",
    "contents": "//  - Maybe even continue futher",
    "position": {
      "from": 366,
      "to": 399
    }
  },
  {
    "type": "line-comment",
    "contents": "//    - this would require us to spawn some defenses and buildings and stuff to make it fun",
    "position": {
      "from": 399,
      "to": 491
    }
  },
  {
    "type": "identifier",
    "contents": "RSTF_MODE_PUSH_ENABLED",
    "position": {
      "from": 492,
      "to": 514
    }
  },
  {
    "type": "keyword",
    "contents": "=",
    "position": {
      "from": 515,
      "to": 516
    }
  },
  {
    "type": "identifier",
    "contents": "false",
    "position": {
      "from": 517,
      "to": 522
    }
  },
  {
    "type": "keyword",
    "contents": ";",
    "position": {
      "from": 522,
      "to": 523
    }
  },
  {
    "type": "identifier",
    "contents": "RSTF_MODE_PUSH_COUNTS",
    "position": {
      "from": 524,
      "to": 545
    }
  },
  {
    "type": "keyword",
    "contents": "=",
    "position": {
      "from": 546,
      "to": 547
    }
  },
  {
    "type": "keyword",
    "contents": "[",
    "position": {
      "from": 548,
      "to": 549
    }
  },
  {
    "type": "keyword",
    "contents": "]",
    "position": {
      "from": 549,
      "to": 550
    }
  },
  {
    "type": "keyword",
    "contents": ";",
    "position": {
      "from": 550,
      "to": 551
    }
  },
  {
    "type": "identifier",
    "contents": "RSTF_MODE_PUSH_POINTS",
    "position": {
      "from": 552,
      "to": 573
    }
  },
  {
    "type": "keyword",
    "contents": "=",
    "position": {
      "from": 574,
      "to": 575
    }
  },
  {
    "type": "keyword",
    "contents": "[",
    "position": {
      "from": 576,
      "to": 577
    }
  },
  {
    "type": "keyword",
    "contents": "]",
    "position": {
      "from": 577,
      "to": 578
    }
  },
  {
    "type": "keyword",
    "contents": ";",
    "position": {
      "from": 578,
      "to": 579
    }
  },
  {
    "type": "identifier",
    "contents": "RSTF_MODE_PUSH_POINT_INDEX",
    "position": {
      "from": 580,
      "to": 606
    }
  },
  {
    "type": "keyword",
    "contents": "=",
    "position": {
      "from": 607,
      "to": 608
    }
  },
  {
    "type": "keyword",
    "contents": "-",
    "position": {
      "from": 609,
      "to": 610
    }
  },
  {
    "type": "number",
    "contents": "1",
    "position": {
      "from": 610,
      "to": 612
    }
  },
  {
    "type": "keyword",
    "contents": ";",
    "position": {
      "from": 611,
      "to": 612
    }
  },
  {
    "type": "identifier",
    "contents": "RSTF_MODE_PUSH_TASK_ATTACKERS",
    "position": {
      "from": 613,
      "to": 642
    }
  },
  {
    "type": "keyword",
    "contents": "=",
    "position": {
      "from": 643,
      "to": 644
    }
  },
  {
    "type": "string",
    "contents": "\"\"",
    "position": {
      "from": 645,
      "to": 646
    }
  },
  {
    "type": "keyword",
    "contents": ";",
    "position": {
      "from": 647,
      "to": 648
    }
  },
  {
    "type": "identifier",
    "contents": "RSTF_MODE_PUSH_TASK_DEFENDERS",
    "position": {
      "from": 649,
      "to": 678
    }
  },
  {
    "type": "keyword",
    "contents": "=",
    "position": {
      "from": 679,
      "to": 680
    }
  },
  {
    "type": "string",
    "contents": "\"\"",
    "position": {
      "from": 681,
      "to": 682
    }
  },
  {
    "type": "keyword",
    "contents": ";",
    "position": {
      "from": 683,
      "to": 684
    }
  },
  {
    "type": "identifier",
    "contents": "RSTF_MODE_DEFENDERS_SIDE",
    "position": {
      "from": 685,
      "to": 709
    }
  },
  {
    "type": "keyword",
    "contents": "=",
    "position": {
      "from": 710,
      "to": 711
    }
  },
  {
    "type": "number",
    "contents": "0",
    "position": {
      "from": 712,
      "to": 714
    }
  },
  {
    "type": "keyword",
    "contents": ";",
    "position": {
      "from": 713,
      "to": 714
    }
  },
  {
    "type": "identifier",
    "contents": "RSTF_MODE_ATTACKERS_SIDE",
    "position": {
      "from": 715,
      "to": 739
    }
  },
  {
    "type": "keyword",
    "contents": "=",
    "position": {
      "from": 740,
      "to": 741
    }
  },
  {
    "type": "number",
    "contents": "1",
    "position": {
      "from": 742,
      "to": 744
    }
  },
  {
    "type": "keyword",
    "contents": ";",
    "position": {
      "from": 743,
      "to": 744
    }
  },
  {
    "type": "identifier",
    "contents": "RSTF_MODE_DISTANCE_KILL_TIMEOUT",
    "position": {
      "from": 746,
      "to": 777
    }
  },
  {
    "type": "keyword",
    "contents": "=",
    "position": {
      "from": 778,
      "to": 779
    }
  },
  {
    "type": "number",
    "contents": "20",
    "position": {
      "from": 780,
      "to": 783
    }
  },
  {
    "type": "keyword",
    "contents": ";",
    "position": {
      "from": 782,
      "to": 783
    }
  },
  {
    "type": "identifier",
    "contents": "RSTF_MODE_PUSH_NEXT_POINT",
    "position": {
      "from": 785,
      "to": 810
    }
  },
  {
    "type": "keyword",
    "contents": "=",
    "position": {
      "from": 811,
      "to": 812
    }
  },
  {
    "type": "keyword",
    "contents": "{",
    "position": {
      "from": 813,
      "to": 814
    }
  },
  {
    "type": "identifier",
    "contents": "RSTF_MODE_PUSH_POINT_INDEX",
    "position": {
      "from": 815,
      "to": 841
    }
  },
  {
    "type": "keyword",
    "contents": "=",
    "position": {
      "from": 842,
      "to": 843
    }
  },
  {
    "type": "identifier",
    "contents": "RSTF_MODE_PUSH_POINT_INDEX",
    "position": {
      "from": 844,
      "to": 870
    }
  },
  {
    "type": "keyword",
    "contents": "+",
    "position": {
      "from": 871,
      "to": 872
    }
  },
  {
    "type": "number",
    "contents": "1",
    "position": {
      "from": 873,
      "to": 875
    }
  },
  {
    "type": "keyword",
    "contents": ";",
    "position": {
      "from": 874,
      "to": 875
    }
  },
  {
    "type": "multi-line-comment",
    "contents": "/*private _nextPoint = RSTF_MODE_PUSH_POINTS select RSTF_MODE_PUSH_POINT_INDEX;\nprivate _point = _nextPoint#0;\nprivate _direction = _nextPoint#1;\n\n\"PUSH_OBJECTIVE\" setMarkerPos _point;\n\n// private _direction = RSTF_DIRECTION;\nprivate _distance = RSTF_SPAWN_DISTANCE_MIN + random(RSTF_SPAWN_DISTANCE_MAX - RSTF_SPAWN_DISTANCE_MIN);\n// TODO: Multiplayer?\n\n// Reset score\nRSTF_SCORE = [0, 0, 0];\n\n// Rebuild target and spawns\nRSTF_POINT = _point;\nRSTF_DIRECTION = _direction;\n\nif (RSTF_MODE_DEFENDERS_SIDE == SIDE_FRIENDLY) then {\nRSTF_DIRECTION = RSTF_DIRECTION + 180;\n};\n\nRSTF_SPAWNS = [\n[0,0,0],\n[0,0,0],\n[0,0,0]\n];\n\nRSTF_SPAWNS set [RSTF_MODE_DEFENDERS_SIDE, _point];\nRSTF_SPAWNS set [RSTF_MODE_ATTACKERS_SIDE, _point vectorAdd [sin(180 + _direction) * _distance, cos(180 + _direction) * _distance, 0]];\n\n// Force-spawn enemy wave\nif (RSTF_MODE_DEFENDERS_SIDE == SIDE_ENEMY) then {\nRSTF_ENEMY_ADVANTAGE_GROUPS = RSTF_ENEMY_ADVANTAGE_GROUPS - 1;\n};\n\n[RSTF_MODE_DEFENDERS_SIDE, true] call RSTF_fnc_spawnWave;\n\nif (RSTF_MODE_DEFENDERS_SIDE == SIDE_ENEMY) then {\nRSTF_ENEMY_ADVANTAGE_GROUPS = RSTF_ENEMY_ADVANTAGE_GROUPS + 1;\n};\n\n// Update waypoints\n[RSTF_MODE_DEFENDERS_SIDE] call RSTF_fnc_refreshSideWaypoints;\n[RSTF_MODE_ATTACKERS_SIDE] call RSTF_fnc_refreshSideWaypoints;\n\n// Move enemy spawn point back\nRSTF_SPAWNS set [\nRSTF_MODE_DEFENDERS_SIDE,\n_point vectorAdd [sin(_direction) * _distance, cos(_direction) * _distance, 0]\n];\n\n// Finish previous task\nif (RSTF_MODE_PUSH_TASK_ATTACKERS != \"\") then {\n[RSTF_MODE_PUSH_TASK_ATTACKERS, \"Succeeded\", true] call BIS_fnc_taskSetState;\n[RSTF_MODE_PUSH_TASK_DEFENDERS, \"FAILED\", true] call BIS_fnc_taskSetState;\n};\n\n0 spawn {\nif (RSTF_MODE_PUSH_POINT_INDEX == 0) then {\nsleep 10;\n};\n\nprivate _pointLetter = toString [65 + (RSTF_MODE_PUSH_POINT_INDEX % 26)];\n\nRSTF_MODE_PUSH_TASK_ATTACKERS = [\n[RSTF_MODE_ATTACKERS_SIDE] call RSTF_fnc_indexSide,\n\"CAPTURE\" + str(RSTF_MODE_PUSH_POINT_INDEX),\n[\"We need to capture this point to advance\", \"Capture point \" + _pointLetter,\"\"],\nRSTF_POINT,\n\"ASSIGNED\",\n0,\ntrue,\n\"attack\"\n] call BIS_fnc_taskCreate;\n\nRSTF_MODE_PUSH_TASK_DEFENDERS = [\n[RSTF_MODE_DEFENDERS_SIDE] call RSTF_fnc_indexSide,\n\"DEFEND\" + str(RSTF_MODE_PUSH_POINT_INDEX),\n[\"Defend this point to prevent enemies advance\", \"Defend point \" + _pointLetter,\"\"],\nRSTF_POINT,\n\"ASSIGNED\",\n0,\ntrue,\n\"defend\"\n] call BIS_fnc_taskCreate;\n};\n\n// Relocate helper markers\n[RSTF_POINT, RSTF_SPAWNS] call RSTF_fnc_createPointMarkers;\n};\n\nRSTF_MODE_PUSH_initDefense = {\nRSTF_MODE_DEFENDERS_SIDE = SIDE_FRIENDLY;\nRSTF_MODE_ATTACKERS_SIDE = SIDE_ENEMY;\n\ncall RSTF_MODE_PUSH_init;\n};\n\nRSTF_MODE_PUSH_init = {\nif (RSTF_MODE_PUSH_SIDE == 1) then {\nRSTF_MODE_DEFENDERS_SIDE = SIDE_FRIENDLY;\nRSTF_MODE_ATTACKERS_SIDE = SIDE_ENEMY;\n} else {\nRSTF_MODE_DEFENDERS_SIDE = SIDE_ENEMY;\nRSTF_MODE_ATTACKERS_SIDE = SIDE_FRIENDLY;\n};\n\nRSTF_MODE_PUSH_ENABLED = true;\npublicVariable \"RSTF_MODE_PUSH_ENABLED\";\n\nRSTF_SPAWN_TRANSPORTS = false;\nRSTF_NEUTRALS_GROUPS = 0;\nRSTF_NEUTRALS_EMPLACEMENTS = false;\nRSTF_TASKS_IFV_ENABLED = false;\nRSTF_TASKS_CLEAR_ENABLED = false;\nRSTF_TASKS_EMP_ENABLED = false;\n};\n\nRSTF_MODE_PUSH_startLoop = {\n// Build points\nprivate _center = RSTF_POINT;\nprivate _radius = RSTF_DISTANCE;\nprivate _direction = RSTF_DIRECTION;\n\n\nif (RSTF_MODE_DEFENDERS_SIDE == SIDE_FRIENDLY) then {\n_direction = _direction + 180;\n};\n\n_center = _center vectorAdd [\nsin(_direction + 180) * _radius,\ncos(_direction + 180) * _radius,\n0\n];\n\nwhile { count(RSTF_MODE_PUSH_POINTS) < RSTF_MODE_PUSH_POINT_COUNT } do {\nprivate _newCenter = _center;\nprivate _advance = _radius * 0.8;\nprivate _iteration = 0;\nprivate _adjustment = if (random 1 > 0.5) then { 1 } else { -1 };\n\n_direction = _direction - 20 + random 40;\n\nwhile { _iteration < 100000 } do {\n_newCenter = _center vectorAdd [\nsin(_direction) * _advance,\ncos(_direction) * _advance,\n0\n];\n\nif (!(surfaceIsWater _newCenter)) exitWith {};\n\n_iteration = _iteration + 1;\n_direction = _direction + _adjustment * 10;\n\nif (_iteration mod 10 == 0) then {\n_advance = _advance * 1.2;\n};\n};\n\n_center = _newCenter;\n\nif (RSTF_DEBUG) then {\nprivate _marker = createMarkerLocal [str(_center), _center];\n_marker setMarkerShape \"ICON\";\n_marker setMarkerType \"mil_flag\";\n};\n\nRSTF_MODE_PUSH_POINTS pushBack [_center, _direction];\n\nif (RSTF_MODE_PUSH_FIRST_POINT_EMPLACEMENTS || count(RSTF_MODE_PUSH_POINTS) > 1) then {\n[RSTF_MODE_PUSH_EMPLACEMENTS_PER_POINT, _center, _direction, RSTF_MODE_DEFENDERS_SIDE] call RSTF_fnc_spawnDefenceEmplacements;\n};\n};\n\nprivate _marker = createMarker [\"PUSH_OBJECTIVE\", _center];\n_marker setMarkerShape \"ELLIPSE\";\n_marker setMarkerSize [100, 100];\n_marker setMarkerColor RSTF_COLOR_NEUTRAL;\n\nwaitUntil { sleep 0.1; !RSTF_INTRO_PLAYING; };\n\ncall RSTF_MODE_PUSH_NEXT_POINT;\n\n0 spawn {\nprivate _center = RSTF_POINT;\nprivate _radius = 100;\nprivate _currentOwner = -1;\nprivate _last = time;\n\nwhile { !RSTF_ENDED } do {\n// Count men for each side inside this point\nprivate _counts = [];\n{\n_counts set [_x, 0];\n} foreach RSTF_SIDES;\n\nprivate _nearest = nearestObjects [RSTF_POINT, [\"Man\"], _radius, true];\n{\n_index = -1;\nif (alive(_x)) then {\nif (side(_x) == west) then {\n_index = SIDE_FRIENDLY;\n};\nif (side(_x) == east) then {\n_index = SIDE_ENEMY;\n};\nif (side(_x) == resistance) then {\n_index = SIDE_NEUTRAL;\n};\n};\n\nif (_index >= 0) then {\n_counts set [_index, (_counts select _index) + 1];\n};\n} foreach _nearest;\n\nRSTF_MODE_PUSH_COUNTS = _counts;\n\n// Now find side with most men\nprivate _best = _currentOwner;\nprivate _bestCount = 0;\n\n{\nif (_x > _bestCount) then {\n_best = _foreachIndex;\n_bestCount = _x;\n};\n} foreach _counts;\n\nif (_best == RSTF_MODE_ATTACKERS_SIDE) then {\n// Add point and reset timer\n_last = time;\nRSTF_SCORE set [_best, (RSTF_SCORE select _best) + 1];\n\n// Notify clients\npublicVariable \"RSTF_SCORE\";\n0 remoteExec [\"RSTF_fnc_onScore\"];\n\n// End when limit is reached\nif (RSTF_SCORE select _best >= RSTF_MODE_PUSH_SCORE_LIMIT) then {\nif (RSTF_MODE_PUSH_POINT_INDEX >= count(RSTF_MODE_PUSH_POINTS) - 1) then {\n[SIDE_FRIENDLY] remoteExec [\"RSTF_fnc_onEnd\"];\n} else {\n// Create notification\n[format[\n\"<t color='%1'>%2</t> captured objective, moving to next\",\nRSTF_SIDES_COLORS_TEXT select SIDE_FRIENDLY,\nRSTF_SIDES_NAMES select _best\n], 5] remoteExec [\"RSTFUI_fnc_addGlobalMessage\"];\n\ncall RSTF_MODE_PUSH_NEXT_POINT;\n};\n};\n};\n\npublicVariable \"RSTF_MODE_PUSH_COUNTS\";\n\nsleep 1;\n};\n};\n\n\n// Kill AI that are too far away from the objective (usually happens when point is pushed)\n0 spawn {\nprivate _killDistance = RSTF_SPAWN_DISTANCE_MAX + 50;\n\nwhile { !RSTF_ENDED } do {\n{\n{\n{\nif (!isPlayer(_x) && alive(_x) && vehicle(_x) == _x) then {\nprivate _distance = _x distance RSTF_POINT;\nif (_distance > _killDistance) then {\nprivate _killTimeout = _x getVariable [\"RSTF_KILL_TIMEOUT\", 0];\nif (_killTimeout < RSTF_MODE_DISTANCE_KILL_TIMEOUT) then {\n_x setVariable [\"RSTF_KILL_TIMEOUT\", _killTimeout + 5];\n} else {\nif (RSTF_DEBUG) then {\nsystemChat format[\"Killing %1 because its too far (%2 m)\", name _x, _distance];\n};\n\n_x setDamage 1;\n};\n};\n};\n} foreach units(_x);\n} foreach _x;\n} forEach RSTF_GROUPS;\n\nsleep 5;\n};\n}*/",
    "position": {
      "from": 876,
      "to": 7972
    }
  },
  {
    "type": "keyword",
    "contents": "}",
    "position": {
      "from": 7972,
      "to": 7973
    }
  },
  {
    "type": "keyword",
    "contents": ";",
    "position": {
      "from": 7973,
      "to": 7974
    }
  },
  {
    "type": "multi-line-comment",
    "contents": "/*\nRSTF_MODE_PUSH_unitKilled = {\n_this call RSTF_fnc_killHandler;\n};\n\nRSTF_MODE_PUSH_taskCompleted = {\nprivate _taskName = param [0];\nprivate _taskScore = param [1];\n\n[format[\"+$%2 <t color='#dddddd'>%1</t>\", _taskName, RSTF_MONEY_PER_TASK], 5] remoteExec [\"RSTFUI_fnc_addGlobalMessage\"];\n\n{\n[_x, RSTF_MONEY_PER_TASK] call RSTF_fnc_addPlayerMoney;\n} foreach allPlayers;\n};\n\nRSTF_MODE_PUSH_vehicleKilled = {};\n*/",
    "position": {
      "from": 7976,
      "to": 8388
    }
  },
  {
    "type": "eof",
    "contents": "",
    "position": {
      "from": 8388,
      "to": 8388
    }
  }
]